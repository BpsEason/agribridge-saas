name: AgriBridge CI/CD Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  # --- Backend Tests (FastAPI) ---
  fastapi-tests:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD_TEST }}
          MYSQL_DATABASE: agribridge_db_test
          MYSQL_USER: ${{ secrets.MYSQL_USER_TEST }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD_TEST }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h 127.0.0.1" --health-interval=5s --health-timeout=2s --health-retries=10
      redis:
        image: redis:7.0-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=5s --health-timeout=2s --health-retries=10
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Python dependencies
        run: |
          pip install -r api/requirements.txt
          pip install pytest flake8 bandit httpx # httpx for API testing
      - name: Wait for services to be healthy
        run: sleep 15 # Give some time for DB/Redis to start
      - name: Run FastAPI tests
        env:
          DATABASE_URL: mysql+pymysql://${{ secrets.MYSQL_USER_TEST }}:${{ secrets.MYSQL_PASSWORD_TEST }}@127.0.0.1:3306/agribridge_db_test
          REDIS_URL: redis://127.0.0.1:6379
          JWT_SECRET_KEY: test-secret-key # For test environment
          ALGORITHM: HS256
          # Mock LINE env vars for tests to avoid actual calls failing
          LINE_CHANNEL_ACCESS_TOKEN: mock_access_token
          LINE_CHANNEL_SECRET: mock_secret
          LINE_USER_ID: U1234567890abcdef1234567890abcdef
        run: |
          # Create database tables for testing
          python -c "from api.models import Base, engine; Base.metadata.create_all(bind=engine)"
          pytest tests/api/
      - name: Lint Python code with Flake8
        run: flake8 api/
      - name: Run security scan with Bandit
        run: bandit -r api/
  
  # --- Frontend Tests (Vue + Vitest + ESLint) ---
  vue-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install frontend dependencies
        run: cd frontend && npm install
      - name: Run Vue tests with coverage
        run: cd frontend && npm run test
      - name: Lint frontend code with ESLint
        run: cd frontend && npm run lint
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/coverage-final.json
          flags: vue-frontend
          name: codecov-vue

  # --- Deployment Job ---
  deploy:
    runs-on: ubuntu-latest
    needs: [fastapi-tests, vue-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push images
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/agribridge-api:latest ./api
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/agribridge-api:latest
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/agribridge-frontend:latest ./frontend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/agribridge-frontend:latest
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /path/to/your/app
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker-compose pull
            docker-compose up -d --force-recreate
            docker system prune -f

  # --- Vercel Frontend Deployment (Optional) ---
  vercel-deploy:
    runs-on: ubuntu-latest
    needs: [vue-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend
      - name: Deploy Project to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend
