openapi: 3.0.0
info:
  title: AgriBridge API
  description: A SaaS platform for sustainable agriculture, integrating FinTech and ESG.
  version: 1.0.0
servers:
  - url: http://localhost:8000/api/v1
    description: Local development server
  - url: https://api.agribridge.com
    description: Production server
tags:
  - name: Authentication
    description: User authentication and JWT management
  - name: Farmers
    description: Farmer profiles and data management
  - name: ESG
    description: ESG report generation and data visualization
  - name: Products
    description: Product listings and management
  - name: Orders
    description: Order processing and tracking
  - name: Financial Ledger
    description: Payment processing and transaction tracking
  - name: IoT
    description: Internet of Things data reception and retrieval
  - name: Blockchain
    description: Mock blockchain transaction recording
  - name: Notifications
    description: Notification services via email and LINE
  - name: Notifications (Mock)
    description: Mock endpoints for frontend to trigger notifications
paths:
  /login:
    post:
      summary: Authenticate a user and get a JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
        '401':
          description: Invalid credentials
  /farmers:
    get:
      summary: Retrieve all farmers
      tags:
        - Farmers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of farmers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FarmerResponse'
    post:
      summary: Create a new farmer
      tags:
        - Farmers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FarmerCreate'
      responses:
        '201':
          description: Farmer successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FarmerResponse'
  /farmers/{farmer_id}/esg-report:
    get:
      summary: Get ESG report for a specific farmer
      tags:
        - ESG
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: farmer_id
          schema:
            type: integer
          required: true
          description: The ID of the farmer
      responses:
        '200':
          description: ESG report data
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ESGReportResponse'
        '404':
          description: Farmer not found
  /products:
    get:
      summary: Retrieve a list of all products with pagination
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: Number of items to return
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
            minimum: 0
          description: Offset for pagination
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponse'
    post:
      summary: Create a new product
      tags:
        - Products
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: Product successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
  /products/{product_id}:
    get:
      summary: Retrieve a specific product by ID
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: product_id
          schema:
            type: integer
          required: true
          description: The ID of the product
      responses:
        '200':
          description: Product data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Product not found
  /orders:
    get:
      summary: Retrieve a list of all orders with pagination
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: Number of items to return
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
            minimum: 0
          description: Offset for pagination
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
    post:
      summary: Create a new order
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
      responses:
        '201':
          description: Order successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Product not found or not accessible by tenant
  /payments:
    post:
      summary: Process a payment (mock)
      tags:
        - Financial Ledger
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        '200':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '400':
          description: Unsupported payment method
  /ledger/transactions:
    get:
      summary: Retrieve financial transactions (mock)
      tags:
        - Financial Ledger
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: A list of mock transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentResponse'
  /iot/data:
    post:
      summary: Receive IoT sensor data (mock)
      tags:
        - IoT
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IoTData'
      responses:
        '201':
          description: IoT data received successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IoTDataResponse'
  /iot/data/{device_id}:
    get:
      summary: Retrieve IoT sensor data for a device (mock)
      tags:
        - IoT
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: device_id
          schema:
            type: string
          required: true
          description: The ID of the IoT device
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            minimum: 1
          description: Number of recent data points to retrieve
      responses:
        '200':
          description: List of IoT data points
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IoTData'
        '404':
          description: No IoT data found for this device or tenant
  /blockchain/transactions:
    post:
      summary: Create a new blockchain transaction (mock)
      tags:
        - Blockchain
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockchainTransaction'
      responses:
        '201':
          description: Transaction recorded on mock blockchain
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/BlockchainTransaction' # Now returns full schema
    get:
      summary: Retrieve recent blockchain transactions (mock)
      tags:
        - Blockchain
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 5
      responses:
        '200':
          description: List of mock blockchain transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlockchainTransaction'
  /line-webhook:
    post:
      summary: Receive and handle LINE webhook events
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: LINE webhook event payload
      responses:
        '200':
          description: Webhook received successfully
        '400':
          description: Invalid signature
        '503':
          description: LINE Webhook handler not initialized
  /notifications/send-line-message:
    post:
      summary: Trigger a mock LINE notification from frontend (for demo)
      tags:
        - Notifications (Mock)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  example: "Uxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                  description: LINE User ID to send message to (mock for demo)
                message:
                  type: string
                  example: "您有新的通知！"
      responses:
        '200':
          description: LINE notification mock sent successfully
        '500':
          description: Failed to send LINE notification

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    FarmerCreate:
      type: object
      properties:
        name:
          type: string
          example: 'Golden Harvest Farm'
        location:
          type: string
          example: 'Taoyuan, Taiwan'
    FarmerResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
        location:
          type: string
        esg_score:
          type: number
          format: float
          example: 85.5
        total_sales:
          type: number
          format: float
          example: 125000.0
    ESGReportResponse:
      type: object
      properties:
        farmer_name:
          type: string
          example: 'Golden Harvest Farm'
        esg_score:
          type: number
          format: float
          example: 85.5
        social_impact:
          type: object
          example:
            fair_trade_index: 0.9
            community_engagement: 'High'
        environmental_impact:
          type: object
          example:
            carbon_footprint_reduction_tons: 1.2
            water_usage_efficiency: 'Moderate'
    ProductCreate:
      type: object
      properties:
        name:
          type: string
          example: '有機蘋果'
        price:
          type: number
          format: float
          example: 50.0
        farmer_id:
          type: integer
          example: 1
    ProductResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
        price:
          type: number
          format: float
          example: 50.0
        farmer_id:
          type: integer
          example: 1
        tenant_id:
          type: integer
          example: 1
    OrderCreate:
      type: object
      properties:
        product_id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 10
        buyer_id:
          type: integer
          example: 101
    OrderResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        product_id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 10
        total_price:
          type: number
          format: float
          example: 500.0
        buyer_id:
          type: integer
          example: 101
        status:
          type: string
          example: 'pending'
        tenant_id:
          type: integer
          example: 1
    PaymentRequest:
      type: object
      properties:
        order_id:
          type: integer
          example: 123
        amount:
          type: number
          format: float
          example: 299.99
        currency:
          type: string
          example: 'TWD'
        payment_method:
          type: string
          enum: ['stripe', 'newebpay']
          example: 'stripe'
    PaymentResponse:
      type: object
      properties:
        transaction_id:
          type: string
          example: 'txn_abc123def456'
        status:
          type: string
          enum: ['completed', 'failed', 'pending']
          example: 'completed'
        amount:
          type: number
          format: float
          example: 299.99
        currency:
          type: string
          example: 'TWD'
        order_id:
          type: integer
          example: 123
    IoTData:
      type: object
      properties:
        device_id:
          type: string
          example: 'farm-sensor-001'
        timestamp:
          type: string
          format: date-time
          example: '2023-10-27T10:00:00Z'
        temperature:
          type: number
          format: float
          example: 25.5
        humidity:
          type: number
          format: float
          example: 70.2
        soil_moisture:
          type: number
          format: float
          example: 45.1
        light_intensity:
          type: number
          format: float
          example: 800
    IoTDataResponse:
      type: object
      properties:
        message:
          type: string
          example: 'IoT data received successfully'
        data:
          $ref: '#/components/schemas/IoTData'
    BlockchainTransaction:
      type: object
      properties:
        sender:
          type: string
          example: 'farmer_wallet_1'
        receiver:
          type: string
          example: 'buyer_wallet_A'
        amount:
          type: number
          format: float
          example: 150.75
        data:
          type: string
          example: 'Product sale: Organic Tomatoes'
        hash:
          type: string
          example: 'a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0e1f2'
        timestamp:
          type: string
          format: date-time
          example: '2023-10-27T10:30:00Z'
        block_id:
          type: integer
          example: 12345
